{"version":3,"sources":["components/inputTodos.jsx","components/incompleteTodos.jsx","components/completeTodos.jsx","App.jsx","index.js"],"names":["InputTodos","props","todoText","onChange","onClick","disabled","style","placeholder","value","backgroundColor","width","height","borderRadius","padding","margin","IncompleteTodos","incompleteTodos","onClickShift","onClickDelete","className","map","todo","index","CompleteTodos","completeTodos","onClickBack","App","useState","setTodoText","setIncompleteTodos","setCompleteTodos","event","target","newTodos","length","color","shiftTdos","splice","newCompleteTodos","deleteTodos","backCompleteTodos","ReactDOM","render","document","getElementById"],"mappings":"uMACaA,EAAa,SAACC,GAEzB,IAAQC,EAA0CD,EAA1CC,SAAUC,EAAgCF,EAAhCE,SAAUC,EAAsBH,EAAtBG,QAASC,EAAaJ,EAAbI,SAGrC,OACE,sBAAKC,MAAOA,EAAZ,UACE,uBACED,SAAUA,EACVE,YAAY,yBACZC,MAAON,EACPC,SAAUA,IAEZ,wBAAQE,SAAUA,EAAUD,QAASA,EAArC,8BAOAE,EAAQ,CACZG,gBAAiB,UACjBC,MAAO,QACPC,OAAQ,OACRC,aAAc,MACdC,QAAS,MACTC,OAAQ,OC1BGC,EAAkB,SAACd,GAE9B,IAAQe,EAAiDf,EAAjDe,gBAAiBC,EAAgChB,EAAhCgB,aAAcC,EAAkBjB,EAAlBiB,cAGvC,OACE,sBAAKC,UAAU,gBAAf,UACE,mBAAGA,UAAU,QAAb,0CACA,6BAEGH,EAAgBI,KAAI,SAACC,EAAMC,GAC1B,OACE,sBAAKH,UAAU,WAAf,UACE,6BAAKE,IACL,wBAAQjB,QAAS,kBAAMa,EAAaK,IAApC,0BACA,wBAAQlB,QAAS,kBAAMc,EAAcI,IAArC,sCCfDC,EAAgB,SAACtB,GAE5B,IAAQuB,EAA+BvB,EAA/BuB,cAAeC,EAAgBxB,EAAhBwB,YAEvB,OAEE,cADA,CACA,OAAKN,UAAU,kBAAf,UACE,mBAAGA,UAAU,QAAb,oCACA,6BACGK,EAAcJ,KAAI,SAACC,EAAMC,GACxB,OACE,sBAAKH,UAAU,WAAf,UACE,6BAAKE,IACL,wBAAQjB,QAAS,kBAAMqB,EAAYH,IAAnC,sCCPDI,EAAM,WACjB,MAAgCC,mBAAS,IAAzC,mBAAOzB,EAAP,KAAiB0B,EAAjB,KAGA,EAA8CD,mBAAS,IAAvD,mBAAOX,EAAP,KAAwBa,EAAxB,KAGA,EAA0CF,mBAAS,IAAnD,mBAAOH,EAAP,KAAsBM,EAAtB,KA2CA,OACE,qCAEE,cAAC,EAAD,CAEE5B,SAAUA,EACVC,SA/CmB,SAAC4B,GAAD,OAAWH,EAAYG,EAAMC,OAAOxB,QAgDvDJ,QA9Ca,WAEjB,GAAiB,KAAbF,EAAJ,CAGA,IAAM+B,EAAQ,sBAAOjB,GAAP,CAAwBd,IACtC2B,EAAmBI,GACnBL,EAAY,MAwCRvB,SAAUW,EAAgBkB,QAAU,IAGrClB,EAAgBkB,QAAU,GACzB,mBAAG5B,MAAO,CAAE6B,MAAO,OAAnB,0FAIF,cAAC,EAAD,CACEnB,gBAAiBA,EACjBC,aAxCe,SAACK,GACpB,IAAMc,EAAS,YAAOpB,GACtBoB,EAAUC,OAAOf,EAAO,GAExB,IAAMgB,EAAgB,sBAAOd,GAAP,CAAsBR,EAAgBM,KAC5DQ,EAAiBQ,GACjBT,EAAmBO,IAmCflB,cAhDgB,SAACI,GAErB,IAAMiB,EAAW,YAAOvB,GACxBuB,EAAYF,OAAOf,EAAO,GAC1BO,EAAmBU,MAgDjB,cAAC,EAAD,CAAef,cAAeA,EAAeC,YAnC7B,SAACH,GACnB,IAAMc,EAAS,YAAOZ,GAEtBY,EAAUC,OAAOf,EAAO,GAExB,IAAMkB,EAAiB,sBAAOxB,GAAP,CAAwBQ,EAAcF,KAE7DQ,EAAiBM,GACjBP,EAAmBW,UChDvBC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.3b7e3c83.chunk.js","sourcesContent":["// propsはコンポ―ネット間で関数の受け渡しを行う\r\nexport const InputTodos = (props) => {\r\n  // propsで持ってきた関数を取得している\r\n  const { todoText, onChange, onClick, disabled } = props;\r\n\r\n  // /* インプットスペース */\r\n  return (\r\n    <div style={style}>\r\n      <input\r\n        disabled={disabled}\r\n        placeholder=\"ToDoを入力\"\r\n        value={todoText}\r\n        onChange={onChange}\r\n      />\r\n      <button disabled={disabled} onClick={onClick}>\r\n        追加\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst style = {\r\n  backgroundColor: \"#c1ffff\",\r\n  width: \"400px\",\r\n  height: \"30px\",\r\n  borderRadius: \"8px\",\r\n  padding: \"8px\",\r\n  margin: \"8px\"\r\n};\r\n","// propsはコンポ―ネット間で関数の受け渡しを行う\r\nexport const IncompleteTodos = (props) => {\r\n  // propsで持ってきた関数を取得している\r\n  const { incompleteTodos, onClickShift, onClickDelete } = props;\r\n  // /* インプットスペース */\r\n  // {/* 未完了のTODOリスト */}\r\n  return (\r\n    <div className=\"complete-area\">\r\n      <p className=\"title\">未完了のTODO</p>\r\n      <ul>\r\n        {/* リストの値を全て順番に表示  indexは通し番号を付与する */}\r\n        {incompleteTodos.map((todo, index) => {\r\n          return (\r\n            <div className=\"list-row\">\r\n              <li>{todo}</li>\r\n              <button onClick={() => onClickShift(index)}>完了</button>\r\n              <button onClick={() => onClickDelete(index)}>削除</button>\r\n            </div>\r\n          );\r\n        })}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n","// propsはコンポ―ネット間で関数の受け渡しを行う\r\nexport const CompleteTodos = (props) => {\r\n  // propsで持ってきた関数を取得している\r\n  const { completeTodos, onClickBack } = props;\r\n  // /* インプットスペース */\r\n  return (\r\n    // {/* 完了したTODOのリスト */}\r\n    <div className=\"incomplete-area\">\r\n      <p className=\"title\">完了のTODO</p>\r\n      <ul>\r\n        {completeTodos.map((todo, index) => {\r\n          return (\r\n            <div className=\"list-row\">\r\n              <li>{todo}</li>\r\n              <button onClick={() => onClickBack(index)}>戻す</button>\r\n            </div>\r\n          );\r\n        })}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n","import { useState } from \"react\";\nimport \"./styles.css\";\nimport { InputTodos } from \"./components/inputTodos\";\nimport { IncompleteTodos } from \"./components/incompleteTodos\";\nimport { CompleteTodos } from \"./components/completeTodos\";\n\n// HTML の構造とそれに使う関数が掛かれている\nexport const App = () => {\n  const [todoText, setTodoText] = useState(\"\");\n\n  // 未完了リストの値が入る関数\n  const [incompleteTodos, setIncompleteTodos] = useState([]);\n\n  // 未完了リストの値が入る関数\n  const [completeTodos, setCompleteTodos] = useState([]);\n\n  const onChangeTodoText = (event) => setTodoText(event.target.value);\n  // クリックしたときに値が追加される関数\n  const onClickAdd = () => {\n    // todoTextに値が入った状態でボタンが押された時のみ実行する\n    if (todoText === \"\") return;\n    // 現在のすべての値+新しい値を代入して\n    // 未完了リストの関数の動的な方の値に入れて更新している\n    const newTodos = [...incompleteTodos, todoText];\n    setIncompleteTodos(newTodos);\n    setTodoText(\"\");\n  };\n  // クリックshチア時に値が削除される関数\n  const onClickDelete = (index) => {\n    // とりあえず一覧表示時してindex番号の値と会うものをspliceで削除する\n    const deleteTodos = [...incompleteTodos];\n    deleteTodos.splice(index, 1);\n    setIncompleteTodos(deleteTodos);\n  };\n  // 未完了のタスクを完了タスクに移動する。消して別のところに追加\n  const onClickShift = (index) => {\n    const shiftTdos = [...incompleteTodos];\n    shiftTdos.splice(index, 1);\n\n    const newCompleteTodos = [...completeTodos, incompleteTodos[index]];\n    setCompleteTodos(newCompleteTodos);\n    setIncompleteTodos(shiftTdos);\n  };\n\n  // 完了リストを未完了リストに移す\n  const onClickBack = (index) => {\n    const shiftTdos = [...completeTodos];\n    // 値を消すときは何番目を消すのか指定する\n    shiftTdos.splice(index, 1);\n\n    const backCompleteTodos = [...incompleteTodos, completeTodos[index]];\n\n    setCompleteTodos(shiftTdos);\n    setIncompleteTodos(backCompleteTodos);\n  };\n\n  // index.jsに返すHTMLが書かれている\n  return (\n    <>\n      {/* インプットスペース */}\n      <InputTodos\n        // 向こうで使う関数を持って行っている\n        todoText={todoText}\n        onChange={onChangeTodoText}\n        onClick={onClickAdd}\n        disabled={incompleteTodos.length >= 5}\n      />\n      {/* TODoリストが五個以上の時にPタグを表示 */}\n      {incompleteTodos.length >= 5 && (\n        <p style={{ color: \"red\" }}>登録できるtodoは五個までです</p>\n      )}\n\n      {/* 未完了のTODOリスト */}\n      <IncompleteTodos\n        incompleteTodos={incompleteTodos}\n        onClickShift={onClickShift}\n        onClickDelete={onClickDelete}\n      />\n\n      {/* 完了したTODOのリスト */}\n      <CompleteTodos completeTodos={completeTodos} onClickBack={onClickBack} />\n    </>\n  );\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport { App } from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}